Problem Description
Postfix expressions are an ordering of mathematical operations, where the operator(+,-,* etc) comes after the operands.

For instance, an operation 2 + 3 (infix notation, which humans use) will be represented as 2 3 + in postfix notation. The computers can understand postfix notation.

Your job is to evaluate the given postfix expression. The expression is given as a string where each token is separated by a space.

The possible operators can be +, - and *

Note that all operands(numbers) are assumed to be non-negative.

Input format
One line of input, containing the string S.

Output format
Print the result of the given expression

Sample Input 1
2 3 +

Sample Output 1
5

Explanation 1
3 + 2 = 5

Sample Input 2
2 3 1 * + 9 -

Sample Output 2
-4

Explanation 2
If the expression is converted into an infix expression, it will be 2 + (3 * 1) – 9 = 5 – 9 = -4.

Constraints
1 <= |S| <= 100

S[i] >= 0, where S[i] is an operand in the expression

Resource
Evaluate a postfix expression
https://www.geeksforgeeks.org/implementation-stack-javascript/

Video Resources
https://www.youtube.com/watch?v=wtynhUwS5hI


function postfixExpression(exp) {
    const stack = [];

    const arr = exp.split(' ');

    for (const str of arr)
    {
        if (str === "+")
        {
            let b = stk.pop();
            let a = stk.pop();
            stk.push(a+b);
        }
        else if (str === "-")
        {
            let b = stk.pop();
            let a = stk.pop();
            stk.push(a-b);
        }
        else if (str==="*")
        {
            let b = stk.pop();
            let a = stk.pop();
            stk.push(a*b);
        }
    else 
    {
        //pusk the stk covert to an integer "using parseInt"
        stk.push(parseInt(str,10));
    }    
    }
    //return the stack to the heap of arr('TOP VALUE)
    return stk [stk.length-1];
    
}

             OR

const postfixExpression = (exp) => {
    const stack = [];

    const tokens = exp.split(' ');

    tokens.forEach(token => {
        if (["+", "-", "*", "/"].includes(token)) {
            const b = stack.pop();
            const a = stack.pop();
            switch (token) {
                case "+":
                    stack.push(a + b);
                    break;
                case "-":
                    stack.push(a - b);
                    break;
                case "*":
                    stack.push(a * b);
                    break;
                case "/":
                    stack.push(a / b);
                    break;
                default:
                    break;
            }
        } else {
            stack.push(parseInt(token, 10));
        }
    });

    return stack[stack.length - 1];
};

// Example usage
console.log(postfixExpression("3 4 +")); // 7
console.log(postfixExpression("5 1 2 + 4 * + 3 -")); // 14


